#!/bin/bash

# From Documentation
# https://github.com/input-output-hk/cardano-tutorials/blob/master/node-setup/080_register_stakepool.md

# Init vars
source /scripts/functions/check_balance
source /scripts/functions/check_pool_registration
source /scripts/functions/wait_for_pool_registration
source /scripts/functions/wait_for_slot
source /scripts/functions/wait_for_sync
source /scripts/init_node_vars

# Enter staking directory
cd ${NODE_PATH}/staking/
mkdir -p transactions

echo ""
echo "Submitting stake pool certificates to the blockchain."

# Check for required files
if [ ! -f "stake.skey" ]; then
    echo "Missing required stake.skey. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "payment.skey" ]; then
    echo "Missing required payment.skey. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "payment.addr" ]; then
    echo "Missing required payment.addr. You need to run \`generate_stake_address\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "cold-keys/cold.skey" ]; then
    echo "Missing required staking/cold-keys/cold.skey. You need to run \`generate_operational_certificate\` to generate this key."
    MISSING_FILES=1
fi

if [ ! -f "pool.cert" ]; then
    echo "Missing required staking/pool.cert. You need to run \`generate_registration_certificate\` to generate this certificate."
    MISSING_FILES=1
fi

if [ -n "$MISSING_FILES" ]; then
    exit
fi

# 
if [ -z "$(check_pool_registration)" ]; then
    echo "Your stake pool is not registered in the blockchain."
    exit
fi

# Wait for node to sync
if [[ "${WAIT_FOR_SYNC}" == "True" ]]; then
    wait_for_sync 99.90
fi

# Generate protocol
cardano-cli shelley query protocol-parameters \
    ${NETWORK_ARGUMENT} \
    --out-file protocol.json

# Draft transaction
TIMESTAMP=$(date +%s)
cardano-cli shelley transaction build-raw \
    --tx-in "${UTXO}#${TXIX}" \
    --tx-out $(cat payment.addr)+0 \
    --ttl 0 \
    --fee 0 \
    --out-file transactions/registration_certificate_update.${TIMESTAMP}.draft \
    --certificate-file pool.cert

## Calculate the fee
FEE=$(cardano-cli shelley transaction calculate-min-fee \
    --tx-body-file transactions/registration_certificate_update.${TIMESTAMP}.draft \
    --tx-in-count 1 \
    --tx-out-count 1 \
    ${NETWORK_ARGUMENT} \
    --witness-count 1 \
    --byron-witness-count 0 \
    --protocol-params-file protocol.json | tr ' ' '\n' | head -1)
#FEE=$(expr ${FEE} + 5000) # FEE IS TOO SMALL?
TOTAL_PRICE=$(expr ${FEE})

echo "Fee is: ${FEE} Lovelace"
echo "Total Price is: ${TOTAL_PRICE} Lovelace"

# Find UTXO in address with enough lovelace to do the transaction
check_balance ${TOTAL_PRICE}

# Update slot and TTL
SLOT=$(get_slot)
TTL=$(expr ${SLOT} + 500)

# Display transaction info
REMAINING_AFTER_TX=$(expr ${LOVELACE} - ${TOTAL_PRICE})
echo "Creating transaction"
echo "Lovelace after transaction: ${REMAINING_AFTER_TX}"
echo "Current tip Slot: ${SLOT}"
echo "TTL: ${TTL}"

#
# Create the transaction
#
echo "Create transaction"
cardano-cli shelley transaction build-raw \
    --tx-in "${UTXO}#${TXIX}" \
    --tx-out $(cat payment.addr)+${REMAINING_AFTER_TX} \
    --ttl ${TTL} \
    --fee ${FEE} \
    --out-file transactions/registration_certificate_update.${TIMESTAMP}.raw \
    --certificate-file pool.cert

# Sign the transaction
echo "Sign transaction"
cardano-cli shelley transaction sign \
    --tx-body-file transactions/registration_certificate_update.${TIMESTAMP}.raw \
    --signing-key-file payment.skey \
    --signing-key-file stake.skey \
    --signing-key-file cold-keys/cold.skey \
    ${NETWORK_ARGUMENT} \
    --out-file transactions/registration_certificate_update.${TIMESTAMP}.signed

# Submit the transaction
echo "Press any key to submit new pool certificate"
read
OUT=$(cardano-cli shelley transaction submit \
    --tx-file transactions/registration_certificate_update.${TIMESTAMP}.signed \
    ${NETWORK_ARGUMENT} 2>&1)

if [[ $OUT =~ "Error" ]]
then
    echo "An error occoured."
    echo ${OUT}
    read
else
    echo "Transaction has been submitted to the blockchain."
    echo ${OUT}

    echo "Your stake pool certificate has been sent to the blockchain."
    touch ${NODE_PATH}/staking/transactions/registration_certificate_update.${TIMESTAMP}.submitted
fi